"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.domainManifestSchema = exports.domainMiniAppConfigSchema = void 0;
const zod_1 = require("zod");
const types_ts_1 = require("../types.js");
const shared_ts_1 = require("./shared.js");
const primaryCategorySchema = zod_1.z.enum([
    'games',
    'social',
    'finance',
    'utility',
    'productivity',
    'health-fitness',
    'news-media',
    'music',
    'shopping',
    'education',
    'developer-tools',
    'entertainment',
    'art-creativity',
]);
const chainList = [
    'eip155:1', // Ethereum mainnet
    'eip155:8453', // Base mainnet
    'eip155:42161', // Arbitrum One
    'eip155:421614', // Arbitrum Sepolia
    'eip155:84532', // Base Sepolia
    'eip155:666666666', // Degen
    'eip155:100', // Gnosis
    'eip155:10', // Optimism
    'eip155:11155420', // Optimism Sepolia
    'eip155:137', // Polygon
    'eip155:11155111', // Ethereum Sepolia
    'eip155:7777777', // Zora
    'eip155:130', // Unichain
    'eip155:10143', // Monad testnet
    'eip155:42220', // Celo
    'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp', // Solana
];
function removeArrayDuplicates(arr) {
    const set = new Set(arr);
    return Array.from(set);
}
exports.domainMiniAppConfigSchema = zod_1.z
    .object({
    // 0.0.0 and 0.0.1 are not technically part of the spec but kept for
    // backwards compatibility. next should always resolve to the most recent
    // schema version.
    version: zod_1.z.union([
        zod_1.z.literal('0.0.0'),
        zod_1.z.literal('0.0.1'),
        zod_1.z.literal('1'),
        zod_1.z.literal('next'),
    ]),
    name: shared_ts_1.miniAppNameSchema,
    iconUrl: shared_ts_1.secureUrlSchema,
    homeUrl: shared_ts_1.secureUrlSchema,
    /** deprecated, set ogImageUrl instead */
    imageUrl: shared_ts_1.secureUrlSchema.optional(),
    /** deprecated, will rely on fc:frame/fc:miniapp meta tag */
    buttonTitle: shared_ts_1.buttonTitleSchema.optional(),
    splashImageUrl: shared_ts_1.secureUrlSchema.optional(),
    splashBackgroundColor: shared_ts_1.hexColorSchema.optional(),
    webhookUrl: shared_ts_1.secureUrlSchema.optional(),
    /** see: https://github.com/farcasterxyz/miniapps/discussions/191 */
    subtitle: (0, shared_ts_1.createSimpleStringSchema)({ max: 30 }).optional(),
    description: (0, shared_ts_1.createSimpleStringSchema)({ max: 170 }).optional(),
    screenshotUrls: zod_1.z.array(shared_ts_1.secureUrlSchema).max(3).optional(),
    primaryCategory: primaryCategorySchema.optional(),
    tags: zod_1.z
        .array((0, shared_ts_1.createSimpleStringSchema)({ max: 20, noSpaces: true }))
        .max(5)
        .optional(),
    heroImageUrl: shared_ts_1.secureUrlSchema.optional(),
    tagline: (0, shared_ts_1.createSimpleStringSchema)({ max: 30 }).optional(),
    ogTitle: (0, shared_ts_1.createSimpleStringSchema)({ max: 30 }).optional(),
    ogDescription: (0, shared_ts_1.createSimpleStringSchema)({ max: 100 }).optional(),
    ogImageUrl: shared_ts_1.secureUrlSchema.optional(),
    /** see: https://github.com/farcasterxyz/miniapps/discussions/204 */
    noindex: zod_1.z.boolean().optional(),
    /** see https://github.com/farcasterxyz/miniapps/discussions/256 */
    requiredChains: zod_1.z
        .array(zod_1.z.enum(chainList))
        .transform(removeArrayDuplicates)
        .optional(),
    requiredCapabilities: zod_1.z
        .array(zod_1.z.enum(types_ts_1.miniAppHostCapabilityList))
        .transform(removeArrayDuplicates)
        .optional(),
    /** see https://github.com/farcasterxyz/miniapps/discussions/158 */
    /** Documentation will be added once this feature is finalized. */
    castShareUrl: shared_ts_1.secureUrlSchema.optional(),
    /** Canonical domain for the miniapp application */
    canonicalDomain: shared_ts_1.domainSchema.optional(),
})
    .refine((data) => {
    if (data.castShareUrl === undefined)
        return true;
    try {
        const homeUrlDomain = new URL(data.homeUrl).hostname;
        const castShareUrlDomain = new URL(data.castShareUrl).hostname;
        return homeUrlDomain === castShareUrlDomain;
    }
    catch {
        return false;
    }
}, {
    message: 'castShareUrl must have the same domain as homeUrl',
    path: ['castShareUrl'],
});
exports.domainManifestSchema = zod_1.z
    .object({
    accountAssociation: shared_ts_1.encodedJsonFarcasterSignatureSchema,
    miniapp: exports.domainMiniAppConfigSchema.optional(),
    // Support both 'frame' and 'miniapp' during transition period
    frame: exports.domainMiniAppConfigSchema.optional(),
})
    .refine((data) => {
    // If both are provided, they must be identical
    if (data.frame && data.miniapp) {
        return JSON.stringify(data.frame) === JSON.stringify(data.miniapp);
    }
    return true;
}, {
    message: 'If both "frame" and "miniapp" are provided, they must be identical',
    path: ['frame', 'miniapp'],
})
    .transform((schema) => {
    return {
        ...schema,
        frame: schema.frame ?? schema.miniapp,
    };
});
